package normalizer

import "gopkg.in/bblfsh/sdk.v1/uast/ann"

var (
	Identifier               = ann.HasInternalType("Identifier")
	PrivateName              = ann.HasInternalType("PrivateName")
	Literal                  = ann.HasInternalType("Literal")
	RegExpLiteral            = ann.HasInternalType("RegExpLiteral")
	NullLiteral              = ann.HasInternalType("NullLiteral")
	StringLiteral            = ann.HasInternalType("StringLiteral")
	BooleanLiteral           = ann.HasInternalType("BooleanLiteral")
	NumericLiteral           = ann.HasInternalType("NumericLiteral")
	Program                  = ann.HasInternalType("Program")
	Function                 = ann.HasInternalType("Function")
	Statement                = ann.HasInternalType("Statement")
	ExpressionStatement      = ann.HasInternalType("ExpressionStatement")
	BlockStatement           = ann.HasInternalType("BlockStatement")
	EmptyStatement           = ann.HasInternalType("EmptyStatement")
	DebuggerStatement        = ann.HasInternalType("DebuggerStatement")
	WithStatement            = ann.HasInternalType("WithStatement")
	ReturnStatement          = ann.HasInternalType("ReturnStatement")
	LabeledStatement         = ann.HasInternalType("LabeledStatement")
	BreakStatement           = ann.HasInternalType("BreakStatement")
	ContinueStatement        = ann.HasInternalType("ContinueStatement")
	IfStatement              = ann.HasInternalType("IfStatement")
	SwitchStatement          = ann.HasInternalType("SwitchStatement")
	SwitchCase               = ann.HasInternalType("SwitchCase")
	ThrowStatement           = ann.HasInternalType("ThrowStatement")
	TryStatement             = ann.HasInternalType("TryStatement")
	CatchClause              = ann.HasInternalType("CatchClause")
	WhileStatement           = ann.HasInternalType("WhileStatement")
	DoWhileStatement         = ann.HasInternalType("DoWhileStatement")
	ForStatement             = ann.HasInternalType("ForStatement")
	ForInStatement           = ann.HasInternalType("ForInStatement")
	ForOfStatement           = ann.HasInternalType("ForOfStatement")
	Declaration              = ann.HasInternalType("Declaration")
	FunctionDeclaration      = ann.HasInternalType("FunctionDeclaration")
	VariableDeclaration      = ann.HasInternalType("VariableDeclaration")
	VariableDeclarator       = ann.HasInternalType("VariableDeclarator")
	Decorator                = ann.HasInternalType("Decorator")
	Directive                = ann.HasInternalType("Directive")
	DirectiveLiteral         = ann.HasInternalType("DirectiveLiteral")
	Expression               = ann.HasInternalType("Expression")
	Super                    = ann.HasInternalType("Super")
	Import                   = ann.HasInternalType("Import")
	ThisExpression           = ann.HasInternalType("ThisExpression")
	ArrowFunctionExpression  = ann.HasInternalType("ArrowFunctionExpression")
	YieldExpression          = ann.HasInternalType("YieldExpression")
	AwaitExpression          = ann.HasInternalType("AwaitExpression")
	ArrayExpression          = ann.HasInternalType("ArrayExpression")
	ObjectExpression         = ann.HasInternalType("ObjectExpression")
	ObjectMember             = ann.HasInternalType("ObjectMember")
	ObjectProperty           = ann.HasInternalType("ObjectProperty")
	ObjectMethod             = ann.HasInternalType("ObjectMethod")
	FunctionExpression       = ann.HasInternalType("FunctionExpression")
	UnaryExpression          = ann.HasInternalType("UnaryExpression")
	UnaryOperator            = ann.HasInternalType("UnaryOperator")
	UpdateExpression         = ann.HasInternalType("UpdateExpression")
	UpdateOperator           = ann.HasInternalType("UpdateOperator")
	BinaryExpression         = ann.HasInternalType("BinaryExpression")
	BinaryOperator           = ann.HasInternalType("BinaryOperator")
	AssignmentExpression     = ann.HasInternalType("AssignmentExpression")
	AssignmentOperator       = ann.HasInternalType("AssignmentOperator")
	LogicalExpression        = ann.HasInternalType("LogicalExpression")
	LogicalOperator          = ann.HasInternalType("LogicalOperator")
	SpreadElement            = ann.HasInternalType("SpreadElement")
	MemberExpression         = ann.HasInternalType("MemberExpression")
	BindExpression           = ann.HasInternalType("BindExpression")
	ConditionalExpression    = ann.HasInternalType("ConditionalExpression")
	CallExpression           = ann.HasInternalType("CallExpression")
	NewExpression            = ann.HasInternalType("NewExpression")
	SequenceExpression       = ann.HasInternalType("SequenceExpression")
	DoExpression             = ann.HasInternalType("DoExpression")
	TemplateLiteral          = ann.HasInternalType("TemplateLiteral")
	TaggedTemplateExpression = ann.HasInternalType("TaggedTemplateExpression")
	TemplateElement          = ann.HasInternalType("TemplateElement")
	Pattern                  = ann.HasInternalType("Pattern")
	AssignmentProperty       = ann.HasInternalType("AssignmentProperty")
	ObjectPattern            = ann.HasInternalType("ObjectPattern")
	ArrayPattern             = ann.HasInternalType("ArrayPattern")
	RestElement              = ann.HasInternalType("RestElement")
	AssignmentPattern        = ann.HasInternalType("AssignmentPattern")
	Class                    = ann.HasInternalType("Class")
	ClassBody                = ann.HasInternalType("ClassBody")
	ClassMethod              = ann.HasInternalType("ClassMethod")
	ClassPrivateMethod       = ann.HasInternalType("ClassPrivateMethod")
	ClassProperty            = ann.HasInternalType("ClassProperty")
	ClassPrivateProperty     = ann.HasInternalType("ClassPrivateProperty")
	ClassDeclaration         = ann.HasInternalType("ClassDeclaration")
	ClassExpression          = ann.HasInternalType("ClassExpression")
	MetaProperty             = ann.HasInternalType("MetaProperty")
	ModuleDeclaration        = ann.HasInternalType("ModuleDeclaration")
	ModuleSpecifier          = ann.HasInternalType("ModuleSpecifier")
	ImportDeclaration        = ann.HasInternalType("ImportDeclaration")
	ImportSpecifier          = ann.HasInternalType("ImportSpecifier")
	ImportDefaultSpecifier   = ann.HasInternalType("ImportDefaultSpecifier")
	ImportNamespaceSpecifier = ann.HasInternalType("ImportNamespaceSpecifier")
	ExportNamedDeclaration   = ann.HasInternalType("ExportNamedDeclaration")
	ExportSpecifier          = ann.HasInternalType("ExportSpecifier")
	OptFunctionDeclaration   = ann.HasInternalType("OptFunctionDeclaration")
	OptClasDeclaration       = ann.HasInternalType("OptClasDeclaration")
	ExportDefaultDeclaration = ann.HasInternalType("ExportDefaultDeclaration")
	ExportAllDeclaration     = ann.HasInternalType("ExportAllDeclaration")
)
